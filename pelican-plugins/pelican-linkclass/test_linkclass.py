"""Unit testing suite for the Link Class Plugin"""

## Copyright (C) 2015  Rafael Laboissiere <rafael@laboissiere.net>
##
## This program is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Affero Public License as published by
## the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see http://www.gnu.org/licenses/.

import os
import re
import unittest
from tempfile import mkdtemp
from shutil import rmtree

from . import linkclass
from pelican import Pelican
from pelican.settings import read_settings


INTERNAL_CLASS = 'foo'
INTERNAL_TEXT = 'internal'
INTERNAL_LINK = 'internal'

EXTERNAL_CLASS = 'bar'
EXTERNAL_TEXT = 'external'
EXTERNAL_LINK_HTTP = 'http://example.org'
EXTERNAL_LINK_HTTPS = 'https://example.org'

LINK_PATTERN = '<a class="%s" href="%s">%s</a></p>'

TEST_FILE_STEM = 'test'
TEST_DIR_PREFIX = 'pelicantests.'

class TestLinkClass (unittest.TestCase):
    """Class for testing the <a> output elements generated by the Link Class plugin"""

    def setUp (self, override = None):
        self.output_path = mkdtemp (prefix = TEST_DIR_PREFIX)
        self.content_path = mkdtemp (prefix = TEST_DIR_PREFIX)
        settings = {
            'PATH': self.content_path,
            'OUTPUT_PATH': self.output_path,
            'PLUGINS': [linkclass],
            'CACKHE_CONTENT': False,
            'LINKCLASS_INTERNAL_CLASS': INTERNAL_CLASS,
            'LINKCLASS_EXTERNAL_CLASS': EXTERNAL_CLASS
        }
        if override:
            settings.update (override)

        ## Generate the test Markdown source file
        fid = open (os.path.join (self.content_path, '%s.md' % TEST_FILE_STEM),
                    'w')
        fid.write ('''Title: Test
Date:

[%s](%s)

[%s](%s)

[%s](%s)
''' % (INTERNAL_TEXT, INTERNAL_LINK,
       EXTERNAL_TEXT, EXTERNAL_LINK_HTTP,
       EXTERNAL_TEXT, EXTERNAL_LINK_HTTPS))
        fid.close ()

        ## Run teh Pelican instance
        self.settings = read_settings (override = settings)
        pelican = Pelican (settings = self.settings)
        pelican.run ()


    def tearDown (self):
        """Remove the temporary directories"""
        rmtree (self.output_path)
        rmtree (self.content_path)


    def search (self, string):
        """"Search for a string in the article output"""
        fid = open (os.path.join (self.output_path, '%s.html' % TEST_FILE_STEM),
                    'r')
        found = False
        for line in fid.readlines ():
            if re.search (string, line):
                found = True
                break
        return found


    def test_internal (self):
        """Test for the internal link"""
        assert self.search (LINK_PATTERN % (INTERNAL_CLASS,
                                            INTERNAL_LINK,
                                            INTERNAL_TEXT))


    def test_external_http (self):
        """Test for the external http link"""
        assert self.search (LINK_PATTERN % (EXTERNAL_CLASS,
                                            EXTERNAL_LINK_HTTP,
                                            EXTERNAL_TEXT))


    def test_external_https (self):
        """Test for the external https link"""
        assert self.search (LINK_PATTERN % (EXTERNAL_CLASS,
                                            EXTERNAL_LINK_HTTPS,
                                            EXTERNAL_TEXT))
